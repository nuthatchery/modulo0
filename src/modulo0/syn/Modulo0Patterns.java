// WARNING: this file is autogenerated! just copy it and adapt to your needs
package modulo0.syn;

import nuthatch.rascal.pattern.impl.ValuesPatternFactory;
import org.eclipse.imp.pdb.facts.IValue;
import org.eclipse.imp.pdb.facts.IString;
import org.eclipse.imp.pdb.facts.type.Type;
import org.nuthatchery.pica.terms.TermFactory;
import nuthatch.pattern.Pattern;public class Modulo0Patterns {
	protected static final ValuesPatternFactory pf = ValuesPatternFactory.getInstance();

	@SafeVarargs public static Pattern<IValue, Type> seq(Pattern<IValue, Type>... args) {
		return pf.cons(TermFactory.Cons_Seq, pf.list(args));
	}

	public static Pattern<IValue, Type> leaf(Pattern<IValue, Type> s) {
		return pf.cons(TermFactory.Cons_Leaf, s);
	}

	public static Pattern<IValue, Type> leaf(IString s) {
		return pf.cons(TermFactory.Cons_Leaf, pf.string(s));
	}

	public static Pattern<IValue, Type> leaf(String s) {
		return pf.cons(TermFactory.Cons_Leaf, pf.string(TermFactory.vf.string(s)));
	}

	public static Pattern<IValue, Type> CompilationUnit(Pattern<IValue, Type> arg0, Pattern<IValue, Type> arg1, Pattern<IValue, Type> arg2) {
		return pf.cons(TermFactory.consType("CompilationUnit", 3), arg0, arg1, arg2);
	}

	public static Pattern<IValue, Type> Def(Pattern<IValue, Type> arg0) {
		return pf.cons(TermFactory.consType("Def", 1), arg0);
	}

	public static Pattern<IValue, Type> Import(Pattern<IValue, Type> arg0) {
		return pf.cons(TermFactory.consType("Import", 1), arg0);
	}

	public static Pattern<IValue, Type> Module(Pattern<IValue, Type> arg0, Pattern<IValue, Type> arg1) {
		return pf.cons(TermFactory.consType("Module", 2), arg0, arg1);
	}

	public static Pattern<IValue, Type> Name(Pattern<IValue, Type> arg0) {
		return pf.cons(TermFactory.consType("Name", 1), arg0);
	}

	public static Pattern<IValue, Type> Package(Pattern<IValue, Type> arg0) {
		return pf.cons(TermFactory.consType("Package", 1), arg0);
	}

	public static Pattern<IValue, Type> QName(Pattern<IValue, Type> arg0) {
		return pf.cons(TermFactory.consType("QName", 1), arg0);
	}

	public static Pattern<IValue, Type> Use(Pattern<IValue, Type> arg0) {
		return pf.cons(TermFactory.consType("Use", 1), arg0);
	}

}
